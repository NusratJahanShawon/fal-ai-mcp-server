# RunBear + Fal.ai Image Editor Setup

## Why This Approach Works Better:

- ✅ **Fal.ai**: More reliable than OpenAI for image editing
- ✅ **RunBear**: Handles all Slack integration automatically
- ✅ **MCP Protocol**: Standard way to connect AI tools
- ✅ **No Complex Setup**: RunBear manages the Slack app for you

## Option 1: MCP Server (Recommended)

### Step 1: Get Fal.ai API Key

1. Go to [fal.ai](https://fal.ai)
2. Sign up for free account
3. Go to [API Keys](https://fal.ai/dashboard/keys)
4. Create new API key
5. Copy the key (starts with `fal_...`)

### Step 2: Install Dependencies

```bash
pip install mcp httpx pillow requests
```

### Step 3: Set Environment Variable

**Windows:**
```cmd
set FAL_KEY=6ea43446-8a40-4452-a839-92fa18b16881:65e34e3b3fe6614be737ceaf07e06ce5
```

**Mac/Linux:**
```bash
export FAL_KEY=your_fal_key_here
```

### Step 4: Run MCP Server

```bash
python fal_ai_mcp_server.py
```

### Step 5: Connect to RunBear

1. Go to [runbear.io](https://runbear.io)
2. Create account and connect your Slack
3. In RunBear dashboard:
   - Add new MCP server
   - Point to your running MCP server
   - Test the connection

### Step 6: Use in Slack

```
@RunBear edit this image: add sunglasses to the person
[Upload image]
```

---

## Option 2: Simple HTTP API (Alternative)

If MCP is too complex, here's a simpler HTTP API version:

### Create `fal_api.py`:

```python
from flask import Flask, request, jsonify
import os
import requests
import asyncio
import httpx

app = Flask(__name__)

class FalAIEditor:
    def __init__(self):
        self.api_key = os.environ.get("FAL_KEY")
        self.base_url = "https://queue.fal.run"
    
    async def edit_image(self, image_url, prompt, model="flux"):
        headers = {
            "Authorization": f"Key {self.api_key}",
            "Content-Type": "application/json"
        }
        
        if model == "flux":
            endpoint = f"{self.base_url}/fal-ai/flux/dev/image-to-image"
            payload = {
                "image_url": image_url,
                "prompt": prompt,
                "strength": 0.8,
                "guidance_scale": 3.5
            }
        elif model == "qwen":
            endpoint = f"{self.base_url}/fal-ai/qwen-image-edit"
            payload = {
                "image_url": image_url,
                "prompt": prompt
            }
        
        async with httpx.AsyncClient() as client:
            response = await client.post(endpoint, json=payload, headers=headers)
            
            if response.status_code == 200:
                result = response.json()
                if model == "flux":
                    return {"success": True, "image_url": result["images"][0]["url"]}
                else:
                    return {"success": True, "image_url": result["image"]["url"]}
            else:
                return {"success": False, "error": response.text}

editor = FalAIEditor()

@app.route('/edit', methods=['POST'])
def edit_image():
    data = request.json
    image_url = data.get('image_url')
    prompt = data.get('prompt', 'enhance this image')
    model = data.get('model', 'flux')
    
    if not image_url:
        return jsonify({"error": "image_url required"}), 400
    
    result = asyncio.run(editor.edit_image(image_url, prompt, model))
    return jsonify(result)

@app.route('/remove-bg', methods=['POST'])
def remove_background():
    data = request.json
    image_url = data.get('image_url')
    
    if not image_url:
        return jsonify({"error": "image_url required"}), 400
    
    # Use background removal endpoint
    headers = {
        "Authorization": f"Key {editor.api_key}",
        "Content-Type": "application/json"
    }
    
    response = requests.post(
        f"{editor.base_url}/fal-ai/imageutils/rembg",
        json={"image_url": image_url},
        headers=headers
    )
    
    if response.status_code == 200:
        result = response.json()
        return jsonify({"success": True, "image_url": result["image"]["url"]})
    else:
        return jsonify({"success": False, "error": response.text})

if __name__ == '__main__':
    app.run(port=5000)
```

### Run the API:
```bash
python fal_api.py
```

### Connect to RunBear:
Configure RunBear to make HTTP calls to your API endpoints.

---

## Option 3: Direct RunBear Integration (Simplest)

### Step 1: Upload Files to RunBear

1. Create a knowledge base in RunBear
2. Upload your Fal.ai integration code
3. Create custom instructions for image editing

### Step 2: Configure RunBear Bot

```markdown
You are an image editing assistant. When users upload images and ask for edits:

1. Get the image URL from Slack
2. Use Fal.ai API to edit the image
3. Return the edited image URL

Available Fal.ai models:
- FLUX Dev: General purpose editing
- Qwen: Text and precise edits  
- Background removal: Remove backgrounds
- Upscaling: Enhance resolution

API Key: ${FAL_KEY}
Base URL: https://queue.fal.run
```

### Step 3: Test in Slack

Upload image and say:
```
@YourBot add a red hat to this person using FLUX model
```

---

## Fal.ai Model Comparison:

| Model | Best For | Cost | Speed |
|-------|----------|------|-------|
| **FLUX Dev** | General editing, style transfer | $0.03/megapixel | Medium |
| **Qwen** | Text editing, precise changes | $0.02/image | Fast |
| **Background Removal** | Remove/replace backgrounds | $0.01/image | Very Fast |
| **Upscaling** | Enhance resolution | $0.05/image | Slow |

## Example Commands:

```bash
# General editing
"Add sunglasses to the person"
"Change the sky to sunset"
"Make this look like a painting"

# Background operations  
"Remove the background"
"Change background to beach"

# Style changes
"Make this black and white"
"Add snow to this landscape"
"Make this more colorful"

# Text editing (use Qwen model)
"Change the text to say 'Hello World'"
"Remove the text from this sign"
```

## Troubleshooting:

### Common Issues:

1. **"FAL_KEY not found"**
   - Set environment variable: `export FAL_KEY=your_key`

2. **"Image URL not accessible"**
   - Ensure image URL is publicly accessible
   - Slack file URLs may expire quickly

3. **"API request failed"**
   - Check Fal.ai account has credits
   - Verify API key is correct

4. **RunBear not responding**
   - Check MCP server is running
   - Verify RunBear connection settings

## Cost Management:

- **Free tier**: 10 API calls
- **Pay-as-you-go**: $0.01-0.05 per image
- **Much cheaper than OpenAI DALL-E**

Set up usage monitoring in Fal.ai dashboard to track costs.

## Next Steps:

1. **Start with Option 3** (Direct RunBear) - simplest setup
2. **Move to Option 1** (MCP Server) for more control
3. **Scale to Option 2** (HTTP API) for multiple integrations

This approach is much more reliable and cost-effective than OpenAI for image editing!